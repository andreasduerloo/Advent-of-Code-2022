/*
The plan:

1. Parse the input into a 'monkey' struct, put them all in a hashmap ([string]*monkey).
Fields:
- Number (0 if not known)
- Two children (strings or "")
- An operation (+, -, *, or /)
- Pointers to the children (see below)
- Pointer to the parent, assume one parent for every monkey /!\

We don't actually need pointers, just build the tree in an array/slice

2. Build a tree of monkeys (put them in a big array/slice?)

3. "Resolve" the tree from bottom to top.
- Grab the two last leaves of the tree
- Resolve their parent (set the number and )
- Remove the leaves from the tree (can also be done by tracking an index)

Children of monkey n are at 2n and 2n+1, parent of monkey n is at floor(n/2)
*/

/*
	STATUS: tree data structure works for the example input, but not for the full input.
	This probably means the tree is extremely unbalanced.

	Root was a ruse.

	New idea:
	- Work with pointers
	- Put all the pointers in a big old slice (which will have a length of len(monkeys))
*/

package main

import (
	"fmt"
	"os"
	"strconv"
	"strings"
)

func main() {
	var lines []string
	input, err := os.ReadFile("./exampleinput.txt")
	if err != nil {
		fmt.Println("Error:", err)
	} else {
		lines = strings.Split(string(input), "\n")
	}

	monkeys := make(map[string]*monkey) // Is indirection necessary here? Might be slower.

	for _, line := range lines {
		parse(line, &monkeys)
	}

	/*
		for k, v := range monkeys {
			fmt.Println(k, v)
		}
	*/

	// Build the tree from the top down
	// FIXME: Instead of overprovisioning, check if the slice contains the array, if not, grow the slice.
	// OR use pointers, after all.
	tree := make([]*monkey, len(monkeys)*5) // We won't use index 1 so the tree math works. Grossly overprovision to avoid index out of bounds. Worst case: the right child always has two children.

	tree[1] = monkeys["root"]
	delete(monkeys, "root")
	index := 1

	for len(monkeys) != 0 { // No guarantee that the slice will be 'packed'
		if tree[index] == nil {
			index += 1
		} else if tree[index].value == 0 {
			tree[2*index] = monkeys[tree[index].children[0]]
			delete(monkeys, tree[index].children[0])

			tree[2*index+1] = monkeys[tree[index].children[1]]
			delete(monkeys, tree[index].children[1])

			index += 1
		} else {
			index += 1
		}
	}

	fmt.Println(tree)

	// Resolve the tree from the bottom up
	fmt.Println(resolve(tree))
}

type monkey struct {
	value     int
	children  [2]string
	operation string
}

/*
type tree struct {
	lastindex: int
	content: []*monkey
}
*/

func parse(l string, m *map[string]*monkey) { // Map is a reference type, we don't actually have to pass a pointer.
	if l != "" {
		elems := strings.Split(l, " ")

		switch len(elems) {
		case 2:
			val, _ := strconv.Atoi(elems[1])
			newm := monkey{
				value: val,
			}

			(*m)[elems[0][:len(elems[0])-1]] = &newm
		case 4:
			newm := monkey{
				children:  [2]string{elems[1], elems[3]},
				operation: elems[2],
			}

			(*m)[elems[0][:len(elems[0])-1]] = &newm
		}
	}
}

func resolve(t []*monkey) int {
	index := len(t) - 1

	for t[1].value == 0 {
		if t[index] == nil {
			index -= 1
		} else { // We found a value
			switch t[index/2].operation {
			case "+":
				t[index/2].value = t[index].value + t[index-1].value
			case "-":
				t[index/2].value = t[index-1].value - t[index].value
			case "*":
				t[index/2].value = t[index].value * t[index-1].value
			case "/":
				t[index/2].value = t[index-1].value / t[index].value
			}

			index = index - 2
		}

	}

	return t[1].value
}
