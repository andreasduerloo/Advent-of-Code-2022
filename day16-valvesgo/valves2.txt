package main

import (
	"fmt"
	"os"
	"strconv"
	"strings"
)

func main() {
	var lines []string
	input, err := os.ReadFile("./input.txt")
	if err != nil {
		fmt.Println("Error:", err)
	} else {
		lines = strings.Split(string(input), "\n")
	}

	// Parsing input
	valves := make(map[string]*valve) // First in a map

	for _, line := range lines {
		if line != "" {
			valves[strings.Split(line, " ")[1]] = newvalve(line)
		}
	}

	// Populate neighbor pointers
	for _, v := range valves {
		for _, nb := range v.neighborsstr {
			v.neighbors = append(v.neighbors, valves[nb])
		}
	}

	start := state{
		time:     0,
		location: valves["AA"],
		open:     false,
		pressure: 0,
		ppm:      0,
		visited:  make([]*valve, 0),
	}

	fmt.Println(dfs(&start, valves))
}

type valve struct {
	name         string
	flowrate     int
	neighborsstr []string
	neighbors    []*valve
}

func newvalve(line string) *valve {
	elements := strings.Split(line, " ")
	flow, _ := strconv.Atoi(elements[4][5 : len(elements[4])-1])
	neighborscomma := elements[9:]

	neighbors := make([]string, 0)

	for _, nb := range neighborscomma {
		if rune(nb[len(nb)-1]) == ',' {
			neighbors = append(neighbors, string(nb[0:len(nb)-1]))
		} else {
			neighbors = append(neighbors, nb)
		}
	}

	out := valve{
		name:         elements[1],
		flowrate:     flow,
		neighborsstr: neighbors,
		neighbors:    make([]*valve, 0),
	}

	return &out
}

type state struct {
	time     int
	location *valve
	open     bool
	pressure int
	ppm      int
	visited  []*valve
}

func dfs(s *state, g map[string]*valve) int {
	best := 0
	stack := []*state{s}

	for len(stack) != 0 {
		s = stack[0]
		stack = stack[1:]

		if s.time == 5 {
			if s.pressure > best {
				best = s.pressure
			}
		} else {
			// 1. Push possible states onto the stack
			// 1.1 Open the valve
			if !s.open && s.location.flowrate != 0 {
				news := state{
					time:     s.time + 1,
					location: s.location,
					open:     true,
					pressure: s.pressure + s.ppm,
					ppm:      s.ppm + s.location.flowrate,
					visited:  s.visited,
				}

				stack = append([]*state{&news}, stack...)
			}

			// 1.2 Add the unvisited neighbors
			if len(s.visited) == len(g) {
				news := state{
					time:     s.time + 1,
					location: s.location,
					open:     false,
					pressure: s.pressure + s.ppm,
					ppm:      s.ppm,
					visited:  s.visited,
				}

				stack = append([]*state{&news}, stack...)
			} else {
				for _, nb := range s.location.neighbors {

					news := state{
						time:     s.time + 1,
						location: nb,
						open:     false,
						pressure: s.pressure + s.ppm,
						ppm:      s.ppm,
						visited:  append(s.visited, s.location),
					}

					stack = append([]*state{&news}, stack...)
				}
			}
		}
	}
	return best
}

// https://fasterthanli.me/series/advent-of-code-2022/part-16
